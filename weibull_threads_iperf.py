import subprocess
import os
import sched, time
import scipy
from scipy.stats import weibull_min
import functools



# saved 126 variants of weibull for experiments
d = {1: [6, 8, 9, 10, 10, 11, 12, 14, 14, 18], 2: [7, 8, 8, 10, 11, 12, 13, 13, 13, 15], 3: [8, 10, 11, 12, 12, 14, 17, 18, 20, 20], 4: [3, 5, 6, 7, 7, 10, 12, 12, 13, 17], 5: [4, 6, 9, 10, 10, 10, 11, 11, 11, 13], 6: [6, 8, 11, 12, 12, 14, 14, 16, 21, 21], 7: [4, 7, 7, 10, 10, 11, 14, 15, 15, 17], 8: [4, 4, 6, 7, 11, 12, 12, 12, 13, 15], 9: [5, 6, 12, 12, 12, 13, 13, 14, 15, 17], 10: [5, 6, 8, 8, 10, 10, 11, 11, 11, 13], 11: [8, 9, 9, 10, 11, 12, 12, 13, 16, 18], 12: [5, 5, 9, 9, 10, 10, 11, 13, 15, 15], 13: [7, 8, 10, 10, 11, 11, 12, 12, 14, 15], 14: [6, 6, 7, 8, 10, 11, 12, 12, 13, 16], 15: [5, 6, 7, 9, 9, 10, 13, 14, 17, 17], 16: [4, 5, 8, 11, 12, 12, 13, 13, 14, 17], 17: [5, 6, 7, 7, 8, 11, 13, 14, 14, 16], 18: [5, 7, 8, 9, 9, 10, 10, 11, 12, 13], 19: [7, 10, 11, 11, 12, 13, 13, 14, 15, 16], 20: [5, 6, 6, 8, 9, 11, 12, 14, 17, 18], 21: [6, 8, 9, 9, 9, 11, 14, 15, 18, 21], 22: [7, 9, 10, 11, 12, 13, 13, 13, 15, 15], 23: [3, 4, 9, 9, 10, 10, 12, 12, 14, 16], 24: [5, 5, 6, 7, 8, 9, 9, 9, 15, 16], 25: [4, 6, 8, 9, 9, 11, 12, 12, 14, 15], 26: [5, 5, 6, 6, 8, 8, 9, 9, 13, 13], 27: [6, 6, 7, 13, 13, 13, 14, 14, 16, 17], 28: [3, 5, 7, 7, 10, 11, 12, 16, 16, 17], 29: [6, 8, 9, 9, 9, 9, 9, 11, 12, 14], 30: [5, 6, 9, 10, 10, 12, 12, 12, 14, 16], 31: [5, 6, 7, 8, 9, 10, 13, 14, 15, 15], 32: [7, 7, 8, 9, 10, 10, 11, 11, 13, 16], 33: [8, 8, 10, 10, 11, 11, 13, 16, 16, 17], 34: [3, 4, 5, 7, 10, 10, 11, 13, 14, 14], 35: [7, 8, 8, 9, 10, 10, 11, 12, 13, 13], 36: [4, 6, 9, 9, 9, 10, 10, 11, 13, 14], 37: [8, 9, 10, 11, 12, 12, 15, 15, 15, 20], 38: [8, 8, 9, 11, 11, 12, 12, 13, 13, 17], 39: [3, 7, 8, 10, 11, 12, 12, 12, 15, 21], 40: [7, 7, 11, 11, 14, 14, 14, 14, 16, 18], 41: [4, 4, 7, 11, 12, 12, 12, 13, 15, 18], 42: [6, 7, 8, 9, 10, 11, 14, 14, 15, 16], 43: [5, 5, 8, 8, 10, 11, 12, 16, 18, 24], 44: [4, 7, 8, 10, 10, 11, 11, 12, 13, 16], 45: [7, 8, 8, 9, 10, 12, 13, 15, 16, 22], 46: [5, 8, 9, 10, 11, 11, 13, 13, 16, 20], 47: [5, 8, 9, 9, 10, 11, 12, 12, 19, 22], 48: [4, 4, 6, 9, 10, 10, 12, 13, 14, 14], 49: [5, 5, 6, 8, 10, 12, 13, 13, 14, 15], 50: [6, 9, 10, 12, 12, 14, 14, 15, 19, 19], 51: [4, 7, 8, 10, 11, 12, 12, 12, 13, 19], 52: [4, 5, 7, 7, 10, 10, 10, 10, 15, 17], 53: [5, 5, 6, 9, 9, 11, 11, 11, 12, 18], 54: [7, 7, 8, 10, 10, 11, 12, 15, 15, 15], 55: [9, 9, 9, 10, 10, 10, 11, 12, 12, 15], 56: [5, 7, 7, 8, 10, 10, 10, 11, 14, 14], 57: [4, 6, 7, 8, 9, 10, 10, 11, 14, 15], 58: [8, 8, 9, 9, 12, 13, 13, 15, 15, 16], 59: [4, 7, 8, 9, 10, 10, 11, 11, 12, 16], 60: [5, 6, 8, 9, 9, 10, 13, 14, 16, 18], 61: [5, 7, 7, 9, 10, 14, 14, 16, 17, 19], 62: [9, 9, 10, 12, 12, 13, 14, 15, 18, 19], 63: [3, 5, 7, 8, 8, 9, 9, 10, 12, 15], 64: [6, 8, 9, 10, 11, 13, 15, 15, 16, 21], 65: [5, 7, 7, 7, 8, 10, 10, 11, 13, 20], 66: [6, 9, 10, 11, 13, 13, 16, 19, 20, 20], 67: [3, 4, 6, 7, 8, 11, 12, 14, 15, 15], 68: [6, 7, 7, 7, 8, 13, 15, 16, 22, 22], 69: [5, 9, 9, 11, 11, 14, 15, 15, 16, 20], 70: [6, 7, 7, 9, 9, 11, 12, 12, 14, 15], 71: [4, 5, 5, 7, 11, 11, 13, 16, 17, 17], 72: [5, 7, 8, 10, 10, 12, 12, 13, 13, 16], 73: [4, 6, 8, 8, 8, 9, 10, 11, 15, 18], 74: [4, 6, 7, 8, 8, 9, 12, 12, 13, 15], 75: [5, 5, 6, 8, 11, 11, 12, 13, 13, 15], 76: [5, 5, 9, 10, 11, 11, 11, 12, 14, 15], 77: [2, 5, 6, 7, 7, 10, 10, 11, 13, 18], 78: [4, 6, 6, 12, 12, 12, 13, 16, 20, 21], 79: [4, 6, 9, 10, 11, 11, 12, 16, 16, 20], 80: [8, 8, 9, 11, 12, 12, 13, 13, 16, 18], 81: [5, 6, 7, 8, 8, 8, 10, 11, 13, 15], 82: [8, 8, 9, 11, 11, 12, 12, 13, 13, 16], 83: [4, 6, 7, 8, 8, 10, 12, 13, 14, 16], 84: [5, 6, 10, 12, 12, 12, 13, 14, 15, 19], 85: [8, 8, 8, 9, 9, 10, 12, 13, 15, 22], 86: [4, 5, 6, 8, 8, 11, 11, 12, 13, 15], 87: [10, 10, 11, 12, 13, 14, 15, 16, 20, 22], 88: [7, 7, 8, 9, 10, 11, 11, 12, 15, 16], 89: [4, 6, 7, 7, 9, 12, 12, 13, 15, 17], 90: [5, 5, 5, 9, 9, 9, 10, 11, 11, 13], 91: [8, 9, 10, 10, 11, 11, 11, 13, 14, 15], 92: [5, 8, 9, 10, 12, 12, 13, 13, 18, 20], 93: [6, 8, 9, 9, 10, 12, 14, 17, 17, 20], 94: [7, 8, 9, 10, 12, 12, 12, 15, 16, 16], 95: [4, 5, 7, 8, 9, 10, 14, 16, 20, 22], 96: [6, 7, 8, 9, 9, 10, 11, 14, 15, 17], 97: [6, 6, 6, 8, 8, 9, 10, 10, 13, 18], 98: [4, 6, 8, 10, 10, 10, 11, 11, 13, 14], 99: [6, 6, 6, 9, 9, 11, 11, 13, 13, 22], 100: [6, 8, 9, 10, 10, 13, 14, 14, 20, 21], 101: [7, 8, 8, 10, 11, 11, 12, 14, 17, 19], 102: [7, 7, 10, 12, 12, 13, 16, 18, 20, 21], 103: [6, 6, 7, 9, 12, 12, 12, 14, 16, 17], 104: [5, 8, 8, 12, 14, 14, 15, 17, 18, 20], 105: [4, 5, 9, 9, 10, 10, 12, 13, 16, 17], 106: [6, 6, 7, 7, 7, 8, 10, 13, 16, 16], 107: [7, 9, 9, 9, 10, 10, 11, 13, 14, 17], 108: [4, 4, 7, 10, 10, 10, 11, 11, 12, 15], 109: [5, 7, 8, 10, 12, 12, 12, 12, 16, 21], 110: [7, 7, 9, 10, 11, 11, 13, 15, 15, 18], 111: [6, 6, 7, 8, 9, 12, 12, 13, 13, 14], 112: [6, 7, 7, 7, 8, 9, 10, 11, 12, 14], 113: [3, 6, 8, 10, 10, 11, 11, 12, 13, 13], 114: [4, 5, 8, 10, 10, 11, 11, 12, 13, 16], 115: [6, 7, 7, 9, 14, 16, 16, 16, 20, 20], 116: [4, 6, 6, 7, 10, 10, 11, 12, 14, 16], 117: [3, 4, 5, 6, 7, 8, 10, 13, 16, 17], 118: [4, 7, 10, 10, 11, 11, 14, 15, 16, 19], 119: [8, 8, 9, 9, 9, 9, 12, 13, 13, 16], 120: [4, 8, 9, 9, 10, 12, 16, 16, 19, 24], 121: [6, 7, 8, 9, 10, 10, 12, 17, 19, 20], 122: [5, 5, 8, 8, 13, 14, 14, 15, 16, 19], 123: [4, 5, 5, 8, 11, 12, 12, 13, 15, 16], 124: [4, 8, 9, 10, 11, 11, 12, 14, 15, 17], 125: [5, 6, 9, 9, 10, 10, 11, 12, 12, 14], 126: [7, 8, 8, 8, 8, 12, 15, 18, 18, 19]}


iperf_clients = []
def iperf(server, port):
    iperf_clients.append(subprocess.Popen(["ip", "netns", "exec", "ns_client", "iperf3", "-c", "192.168.1.1", "-B", "192.168.1.2", "-p", f"{port}", "-f", "K", "-t", "10", "-C", "cubic"]))
    # subprocess.Popen(["ip", "netns", "exec", "ns_client", "iperf3", "-c", "192.168.1.1", "-B", "192.168.1.2", "-p", f"{port}", "-f", "K", "-t", "5", "-C", "cubic",
    #                   ">", f"testoutput/weibull_threads/{os.getenv('EXPERIMENT')}.txt"])
    # subprocess.Popen(f"ip netns exec ns_client iperf3 -c 192.168.1.1 -B 192.168.1.2 -p {port} -f K -t 5 -C cubic > test_output/weibull_threads/{os.getenv('EXPERIMENT')}.txt")

k = 2.4

exp_number = int(os.getenv("EXPERIMENT"))
print (f"EXP NUMBER IS {exp_number} so d[{exp_number}]={d[exp_number]}")
x = d[exp_number]


# Set up scheduler
print("Set up scheduler")
sch = sched.scheduler(time.time, time.sleep)

# Set up iperf servers:
print("Set up iperf servers")
servers = []
start_port = 5400
for el in x:
    servers.append([subprocess.Popen(["ip", "netns", "exec", "ns_server", "iperf3","-s","-p",f"{start_port}","-f", "K", "&"]), start_port])
    start_port+=1

# Block until the action has been run
start_time = time.time()
for i in range(len(x)): 
    # Schedule when we want the iperf action to occur
    print(f"TIME OF RUNNING: {start_time+x[i]}, {time.time()}")
    sch.enterabs(start_time+x[i], 0, functools.partial(iperf, servers[i][0], servers[i][1]))
sch.run()

print("wait clients")
time.sleep(11)
# for client in iperf_clients:
#     subprocess.run(f"wait {client.pid}", shell=True)

#kill servers
print("KILL SERVERS")
for s in servers:
    subprocess.run(f"kill {s[0].pid}", shell=True)
